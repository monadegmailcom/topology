import Mathlib.CategoryTheory.Category.Basic
import Mathlib.CategoryTheory.Iso
import Mathlib.CategoryTheory.Opposites

import Topology.Chap0.Chap0_2.Chap0_2_1.Ex0_3_opposite

open CategoryTheory

/- why is mathlib4 using typeclasses like this instead of plain properties
   like below?
class IsLeftInvertible [Category C] {X : C} {Y : C} (f : X ‚ü∂ Y) where
  prop : ‚àÉ g : Y ‚ü∂ X, f ‚â´ g = ùüô X
class IsRightInvertible [Category C] {X : C} {Y : C} (f : X ‚ü∂ Y) where
  prop : ‚àÉ g : Y ‚ü∂ X, g ‚â´ f = ùüô Y
-/

def is_left_inverse_of' [Category C] {X : C} {Y : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ X)
  : Prop := g ‚â´ f = ùüô Y

-- the infix version shadows the original version
infix:50 "is_left_inverse_of" => is_left_inverse_of'

def is_left_invertible [Category C] {X : C} {Y : C} (f : X ‚ü∂ Y) : Prop
  := ‚àÉ g, g is_left_inverse_of f

postfix:50 "is_left_invertible" => is_left_invertible

theorem left_inv_comp
  [Category C] {X : C} {Y : C} {Z : C}
  {f : X ‚ü∂ Y} {f' : Y ‚ü∂ X} {g : Y ‚ü∂ Z} {g' : Z ‚ü∂ Y}
  (p : f' is_left_inverse_of f) (q : g' is_left_inverse_of g)
  : (g' ‚â´ f') is_left_inverse_of (f ‚â´ g) := calc
    (f ‚â´ g) ‚â´ (g' ‚â´ f') = f ‚â´ (g ‚â´ g') ‚â´ f' := by simp
    _ = f ‚â´ ùüô Y ‚â´ f' := by rw[q]
    _ = f ‚â´ f' := by simp
    _ = ùüô X := by rw[p]

def is_right_inverse_of' [Category C] {X : C} {Y : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ X)
  : Prop := f ‚â´ g = ùüô X

infix:50 "is_right_inverse_of" => is_right_inverse_of'

def is_right_invertible' [Category C] {X : C} {Y : C} (f : X ‚ü∂ Y) : Prop
  := ‚àÉ g, g is_right_inverse_of f

postfix:50 "is_right_invertible" => is_right_invertible'

theorem left_right_inv_mutual_eq
  [Category C] {X : C} {Y : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ X)
  : f is_left_inverse_of g ‚Üî g is_right_inverse_of f := Iff.intro id id

theorem right_inv_comp
  [Category C] {X : C} {Y : C} {Z : C}
  {f : X ‚ü∂ Y} {f' : Y ‚ü∂ X} {g : Y ‚ü∂ Z} {g' : Z ‚ü∂ Y}
  (p : g' is_right_inverse_of g) (q : f' is_right_inverse_of f)
  : (g' ‚â´ f') is_right_inverse_of (f ‚â´ g) := by
    simp[‚Üêleft_right_inv_mutual_eq] at *
    apply left_inv_comp p q

theorem left_right_inv_unique [Category C] {X : C} {Y : C}
  (g : Y ‚ü∂ X) (h : Y ‚ü∂ X) (f : X ‚ü∂ Y)
  (p : g is_left_inverse_of f) (q : h is_right_inverse_of f)
  : g = h := calc
    g = ùüô Y ‚â´ g := by simp
    _ = (h ‚â´ f) ‚â´ g := by rw[‚Üêq]
    _ = h ‚â´ (f ‚â´ g) := by simp
    _ = h ‚â´ ùüô X := by rw[p]
    _ = h := by simp

def is_invertible' [Category C] {X : C} {Y : C} (f : X ‚ü∂ Y) : Prop
  := f is_left_invertible ‚àß f is_right_invertible

postfix:50 "is_invertible" => is_invertible'

theorem ex_common_inv [Category C] {X : C} {Y : C} (f : X ‚ü∂ Y) :
  f is_invertible -> ‚àÉ g, g is_left_inverse_of f ‚àß g is_right_inverse_of f := by
    intro ‚ü®‚ü®g, l_inv‚ü©, ‚ü®h, r_inv‚ü©‚ü©
    have : g = h := left_right_inv_unique g h f l_inv r_inv
    rw [this] at l_inv
    exact ‚ü®h, ‚ü®l_inv, r_inv‚ü©‚ü©

def is_inverse_of' [Category C] {X : C} {Y : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ X)
  : Prop := f is_left_inverse_of g ‚àß f is_right_inverse_of g

infix:50 "is_inverse_of" => is_inverse_of'

theorem inv_iff_ex_inverse [Category C] {X : C} {Y : C} (f : X ‚ü∂ Y) :
  f is_invertible ‚Üî ‚àÉ g : Y ‚ü∂ X, g is_inverse_of f := by
    apply Iff.intro
    . apply ex_common_inv f
    . intro ‚ü®g, ‚ü®p, q‚ü©‚ü©
      exact ‚ü®‚ü®g, p‚ü©,‚ü®g, q‚ü©‚ü©

-- my invertibility is the same as mathlib's isomorphism property
theorem is_invertible_iff_is_iso
  [Category C] {X : C} {Y : C} (f : X ‚ü∂ Y) : f is_invertible ‚Üî IsIso f := by
  apply Iff.intro
  . apply IsIso.mk ‚àò (ex_common_inv f)
  . intro ‚ü®g, ‚ü®lhs, rhs‚ü©‚ü©
    exact ‚ü®‚ü®g, lhs‚ü©,‚ü®g, rhs‚ü©‚ü©

theorem id_is_invertible [Category C] (X : C) : ùüô X is_invertible :=
  ‚ü®‚ü®ùüô X, Category.comp_id (ùüô X)‚ü©, ‚ü®ùüô X, Category.comp_id (ùüô X)‚ü©‚ü©

def is_isomorphic_to' [Category C] (X Y : C) : Prop
  := ‚àÉ f : X ‚ü∂ Y, f is_invertible

infix:50 "is_isomorphic_to" => is_isomorphic_to'

-- to be isomorphic is an equivalence relation

theorem isomorphic_is_refl [Category C] : IsRefl C is_isomorphic_to' :=
  IsRefl.mk (fun X => ‚ü®ùüô X, id_is_invertible X‚ü©)

theorem isomorphic_is_symm [Category C] : IsSymm C is_isomorphic_to' :=
  IsSymm.mk (fun _ _ X_iso_Y =>
    have ‚ü®f, f_inv‚ü© := X_iso_Y
    have ‚ü®g, ‚ü®p, q‚ü©‚ü© := ex_common_inv f f_inv
    ‚ü®g, ‚ü®‚ü®f, q‚ü©, ‚ü®f, p‚ü©‚ü©‚ü©)

theorem isomorphic_is_trans [Category C] : IsTrans C is_isomorphic_to' :=
  IsTrans.mk (fun _ _ _ X_iso_Y Y_iso_Z =>
    have ‚ü®f, f_inv‚ü© := X_iso_Y
    have ‚ü®f', ‚ü®pf, qf‚ü©‚ü© := ex_common_inv f f_inv
    have ‚ü®g, g_inv‚ü© := Y_iso_Z
    have ‚ü®g', ‚ü®pg, qg‚ü©‚ü© := ex_common_inv g g_inv
    have p : f ‚â´ g is_left_invertible := ‚ü®g' ‚â´ f', left_inv_comp pf pg‚ü©
    have q : f ‚â´ g is_right_invertible := ‚ü®g' ‚â´ f', right_inv_comp qg qf‚ü©
    ‚ü®f ‚â´ g, ‚ü®p, q‚ü©‚ü©
    )

/- equivalences with opposite category -/
theorem is_left_inv_of_iff_op_is_right_inv_of_op
  [Category C] {X : C} {Y : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ X)
  : f is_left_inverse_of g ‚Üî f.op is_right_inverse_of g.op := by
      apply Iff.intro
      . intro p
        exact calc
          f.op ‚â´ g.op = (g ‚â´ f).op := rfl
          _ = (ùüô Y).op := by rw [p]
      . intro p
        exact calc
          g ‚â´ f = (f.op ‚â´ g.op).unop := rfl
          _ = (ùüô (Opposite.op Y)).unop := by rw [p]

theorem is_right_inv_of_iff_op_is_left_inv_of_op
  [Category C] {X : C} {Y : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ X)
  : f is_right_inverse_of g ‚Üî f.op is_left_inverse_of g.op := calc
      f is_right_inverse_of g ‚Üî g is_left_inverse_of f
        := by rw[left_right_inv_mutual_eq]
      _ ‚Üî g.op is_right_inverse_of f.op
        := by rw[is_left_inv_of_iff_op_is_right_inv_of_op]

theorem is_left_inv_iff_op_is_right_inv [Category C] {X : C} {Y : C}
  (f : X ‚ü∂ Y) : f is_left_invertible ‚Üî f.op is_right_invertible := by
    apply Iff.intro
    . intro ‚ü®g, p‚ü©
      have : g.op is_right_inverse_of f.op
        := Iff.mp (is_left_inv_of_iff_op_is_right_inv_of_op g f) p
      exact ‚ü®g.op, this‚ü©
    . intro ‚ü®g, p‚ü©
      let g' : Y ‚ü∂ X := g.unop
      have : g = g'.op := rfl
      rw [this] at p
      have : g' is_left_inverse_of f
        := Iff.mpr (is_left_inv_of_iff_op_is_right_inv_of_op g' f) p
      exact ‚ü®g', this‚ü©

theorem is_right_inv_iff_op_is_left_inv [Category C] {X : C} {Y : C}
  (f : X ‚ü∂ Y) : f is_right_invertible ‚Üî f.op is_left_invertible := by
    apply Iff.intro
    . intro ‚ü®g, h‚ü©
      use g.op
      exact Iff.mp (is_right_inv_of_iff_op_is_left_inv_of_op g f) h
    intro ‚ü®g, h‚ü©
    let g' : Y ‚ü∂ X := g.unop
    have h2 : g'.op = g := Quiver.Hom.op_unop g
    rw [‚Üêh2] at h
    use g'
    exact (is_right_inv_of_iff_op_is_left_inv_of_op g' f).mpr h

theorem is_inv_iff_op_is_inv [Category C] {X : C} {Y : C} (f : X ‚ü∂ Y) :
  f is_invertible ‚Üî f.op is_invertible := calc
    f is_invertible ‚Üî f is_left_invertible ‚àß f is_right_invertible := by rfl
    _ ‚Üî f.op is_right_invertible ‚àß f.op is_left_invertible
      := by rw [is_left_inv_iff_op_is_right_inv f,
                is_right_inv_iff_op_is_left_inv f]
    _ ‚Üî f.op is_left_invertible ‚àß f.op is_right_invertible
      := by simp[and_comm]
    _ ‚Üî f.op is_invertible := by rfl
